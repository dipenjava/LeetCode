class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> res(2, -1);  // Initialize result with [-1, -1]
        int i = 0;
        int j = nums.size() - 1;

        // Find the first occurrence (left boundary)
        while (i <= j) {
            int mid = i + (j - i) / 2;
            if (nums[mid] == target) {
                res[0] = mid;
                j = mid - 1;  // Continue searching on the left side
            } else if (nums[mid] < target) {
                i = mid + 1;
            } else {
                j = mid - 1;
            }
        }

        i = 0;
        j = nums.size() - 1;

        // Find the last occurrence (right boundary)
        while (i <= j) {
            int mid = i + (j - i) / 2;
            if (nums[mid] == target) {
                res[1] = mid;
                i = mid + 1;  // Continue searching on the right side
            } else if (nums[mid] < target) {
                i = mid + 1;
            } else {
                j = mid - 1;
            }
        }

        return res;
    }
};
